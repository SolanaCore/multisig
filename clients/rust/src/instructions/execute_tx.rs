//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct ExecuteTx {
      
              
          pub multisig: solana_pubkey::Pubkey,
          
              
          pub multisig_signer: solana_pubkey::Pubkey,
          
              
          pub transaction: solana_pubkey::Pubkey,
      }

impl ExecuteTx {
  pub fn instruction(&self) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(&[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(3+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            self.multisig,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.multisig_signer,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.transaction,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let data = borsh::to_vec(&ExecuteTxInstructionData::new()).unwrap();
    
    solana_instruction::Instruction {
      program_id: crate::SOLANA_CORE_MULTISIG_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct ExecuteTxInstructionData {
            discriminator: [u8; 8],
      }

impl ExecuteTxInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [249, 17, 145, 23, 12, 252, 17, 41],
                  }
  }
}

impl Default for ExecuteTxInstructionData {
  fn default() -> Self {
    Self::new()
  }
}



/// Instruction builder for `ExecuteTx`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` multisig
          ///   1. `[]` multisig_signer
                ///   2. `[writable]` transaction
#[derive(Clone, Debug, Default)]
pub struct ExecuteTxBuilder {
            multisig: Option<solana_pubkey::Pubkey>,
                multisig_signer: Option<solana_pubkey::Pubkey>,
                transaction: Option<solana_pubkey::Pubkey>,
                __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl ExecuteTxBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn multisig(&mut self, multisig: solana_pubkey::Pubkey) -> &mut Self {
                        self.multisig = Some(multisig);
                    self
    }
            #[inline(always)]
    pub fn multisig_signer(&mut self, multisig_signer: solana_pubkey::Pubkey) -> &mut Self {
                        self.multisig_signer = Some(multisig_signer);
                    self
    }
            #[inline(always)]
    pub fn transaction(&mut self, transaction: solana_pubkey::Pubkey) -> &mut Self {
                        self.transaction = Some(transaction);
                    self
    }
            /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = ExecuteTx {
                              multisig: self.multisig.expect("multisig is not set"),
                                        multisig_signer: self.multisig_signer.expect("multisig_signer is not set"),
                                        transaction: self.transaction.expect("transaction is not set"),
                      };
    
    accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
  }
}

  /// `execute_tx` CPI accounts.
  pub struct ExecuteTxCpiAccounts<'a, 'b> {
          
                    
              pub multisig: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub multisig_signer: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub transaction: &'b solana_account_info::AccountInfo<'a>,
            }

/// `execute_tx` CPI instruction.
pub struct ExecuteTxCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub multisig: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub multisig_signer: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub transaction: &'b solana_account_info::AccountInfo<'a>,
        }

impl<'a, 'b> ExecuteTxCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: ExecuteTxCpiAccounts<'a, 'b>,
          ) -> Self {
    Self {
      __program: program,
              multisig: accounts.multisig,
              multisig_signer: accounts.multisig_signer,
              transaction: accounts.transaction,
                }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(3+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            *self.multisig.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.multisig_signer.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.transaction.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let data = borsh::to_vec(&ExecuteTxInstructionData::new()).unwrap();
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::SOLANA_CORE_MULTISIG_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(4 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.multisig.clone());
                        account_infos.push(self.multisig_signer.clone());
                        account_infos.push(self.transaction.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `ExecuteTx` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` multisig
          ///   1. `[]` multisig_signer
                ///   2. `[writable]` transaction
#[derive(Clone, Debug)]
pub struct ExecuteTxCpiBuilder<'a, 'b> {
  instruction: Box<ExecuteTxCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> ExecuteTxCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(ExecuteTxCpiBuilderInstruction {
      __program: program,
              multisig: None,
              multisig_signer: None,
              transaction: None,
                                __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn multisig(&mut self, multisig: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.multisig = Some(multisig);
                    self
    }
      #[inline(always)]
    pub fn multisig_signer(&mut self, multisig_signer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.multisig_signer = Some(multisig_signer);
                    self
    }
      #[inline(always)]
    pub fn transaction(&mut self, transaction: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.transaction = Some(transaction);
                    self
    }
            /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
        let instruction = ExecuteTxCpi {
        __program: self.instruction.__program,
                  
          multisig: self.instruction.multisig.expect("multisig is not set"),
                  
          multisig_signer: self.instruction.multisig_signer.expect("multisig_signer is not set"),
                  
          transaction: self.instruction.transaction.expect("transaction is not set"),
                    };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct ExecuteTxCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            multisig: Option<&'b solana_account_info::AccountInfo<'a>>,
                multisig_signer: Option<&'b solana_account_info::AccountInfo<'a>>,
                transaction: Option<&'b solana_account_info::AccountInfo<'a>>,
                /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

