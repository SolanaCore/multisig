/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from "@solana/kit";
import { SOLANA_CORE_MULTISIG_PROGRAM_ADDRESS } from "../programs";

/** InvalidThreshold: Threshold must be greater than zero and less than or equal to number of owners */
export const SOLANA_CORE_MULTISIG_ERROR__INVALID_THRESHOLD = 0x1770; // 6000
/** InvalidOwner: The owner is not part of the multisig group */
export const SOLANA_CORE_MULTISIG_ERROR__INVALID_OWNER = 0x1771; // 6001
/** InsufficientSigners: Not enough owners signed this transaction. */
export const SOLANA_CORE_MULTISIG_ERROR__INSUFFICIENT_SIGNERS = 0x1772; // 6002
/** TransactionAlreadyExecuted: Transaction is already executed */
export const SOLANA_CORE_MULTISIG_ERROR__TRANSACTION_ALREADY_EXECUTED = 0x1773; // 6003
/** InvalidTransactionDetails: Transaction details provided are invalid */
export const SOLANA_CORE_MULTISIG_ERROR__INVALID_TRANSACTION_DETAILS = 0x1774; // 6004

export type SolanaCoreMultisigError =
  | typeof SOLANA_CORE_MULTISIG_ERROR__INSUFFICIENT_SIGNERS
  | typeof SOLANA_CORE_MULTISIG_ERROR__INVALID_OWNER
  | typeof SOLANA_CORE_MULTISIG_ERROR__INVALID_THRESHOLD
  | typeof SOLANA_CORE_MULTISIG_ERROR__INVALID_TRANSACTION_DETAILS
  | typeof SOLANA_CORE_MULTISIG_ERROR__TRANSACTION_ALREADY_EXECUTED;

let solanaCoreMultisigErrorMessages:
  | Record<SolanaCoreMultisigError, string>
  | undefined;
if (process.env.NODE_ENV !== "production") {
  solanaCoreMultisigErrorMessages = {
    [SOLANA_CORE_MULTISIG_ERROR__INSUFFICIENT_SIGNERS]: `Not enough owners signed this transaction.`,
    [SOLANA_CORE_MULTISIG_ERROR__INVALID_OWNER]: `The owner is not part of the multisig group`,
    [SOLANA_CORE_MULTISIG_ERROR__INVALID_THRESHOLD]: `Threshold must be greater than zero and less than or equal to number of owners`,
    [SOLANA_CORE_MULTISIG_ERROR__INVALID_TRANSACTION_DETAILS]: `Transaction details provided are invalid`,
    [SOLANA_CORE_MULTISIG_ERROR__TRANSACTION_ALREADY_EXECUTED]: `Transaction is already executed`,
  };
}

export function getSolanaCoreMultisigErrorMessage(
  code: SolanaCoreMultisigError,
): string {
  if (process.env.NODE_ENV !== "production") {
    return (
      solanaCoreMultisigErrorMessages as Record<SolanaCoreMultisigError, string>
    )[code];
  }

  return "Error message not available in production bundles.";
}

export function isSolanaCoreMultisigError<
  TProgramErrorCode extends SolanaCoreMultisigError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode,
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    SOLANA_CORE_MULTISIG_PROGRAM_ADDRESS,
    code,
  );
}
