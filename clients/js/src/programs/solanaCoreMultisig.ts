/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from "@solana/kit";
import {
  type ParsedApproveInstruction,
  type ParsedCancelTxInstruction,
  type ParsedCreateTxInstruction,
  type ParsedEditTxInstruction,
  type ParsedExecuteTxInstruction,
  type ParsedInitializeMultisigInstruction,
  type ParsedRevokeApprovalInstruction,
} from "../instructions";

export const SOLANA_CORE_MULTISIG_PROGRAM_ADDRESS =
  "C9h86YyYMpKViSzRpE7XUPrRVRypu5WTSitJ9n8czcZh" as Address<"C9h86YyYMpKViSzRpE7XUPrRVRypu5WTSitJ9n8czcZh">;

export enum SolanaCoreMultisigAccount {
  Multisig,
  Transaction,
}

export function identifySolanaCoreMultisigAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): SolanaCoreMultisigAccount {
  const data = "data" in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([224, 116, 121, 186, 68, 161, 79, 236]),
      ),
      0,
    )
  ) {
    return SolanaCoreMultisigAccount.Multisig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([11, 24, 174, 129, 203, 117, 242, 23]),
      ),
      0,
    )
  ) {
    return SolanaCoreMultisigAccount.Transaction;
  }
  throw new Error(
    "The provided account could not be identified as a solanaCoreMultisig account.",
  );
}

export enum SolanaCoreMultisigInstruction {
  Approve,
  CancelTx,
  CreateTx,
  EditTx,
  ExecuteTx,
  InitializeMultisig,
  RevokeApproval,
}

export function identifySolanaCoreMultisigInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): SolanaCoreMultisigInstruction {
  const data = "data" in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([69, 74, 217, 36, 115, 117, 97, 76]),
      ),
      0,
    )
  ) {
    return SolanaCoreMultisigInstruction.Approve;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([235, 85, 151, 12, 219, 197, 50, 18]),
      ),
      0,
    )
  ) {
    return SolanaCoreMultisigInstruction.CancelTx;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([97, 223, 80, 153, 55, 13, 155, 12]),
      ),
      0,
    )
  ) {
    return SolanaCoreMultisigInstruction.CreateTx;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([85, 186, 248, 177, 31, 2, 163, 164]),
      ),
      0,
    )
  ) {
    return SolanaCoreMultisigInstruction.EditTx;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([249, 17, 145, 23, 12, 252, 17, 41]),
      ),
      0,
    )
  ) {
    return SolanaCoreMultisigInstruction.ExecuteTx;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([220, 130, 117, 21, 27, 227, 78, 213]),
      ),
      0,
    )
  ) {
    return SolanaCoreMultisigInstruction.InitializeMultisig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([44, 51, 184, 108, 182, 202, 20, 53]),
      ),
      0,
    )
  ) {
    return SolanaCoreMultisigInstruction.RevokeApproval;
  }
  throw new Error(
    "The provided instruction could not be identified as a solanaCoreMultisig instruction.",
  );
}

export type ParsedSolanaCoreMultisigInstruction<
  TProgram extends string = "C9h86YyYMpKViSzRpE7XUPrRVRypu5WTSitJ9n8czcZh",
> =
  | ({
      instructionType: SolanaCoreMultisigInstruction.Approve;
    } & ParsedApproveInstruction<TProgram>)
  | ({
      instructionType: SolanaCoreMultisigInstruction.CancelTx;
    } & ParsedCancelTxInstruction<TProgram>)
  | ({
      instructionType: SolanaCoreMultisigInstruction.CreateTx;
    } & ParsedCreateTxInstruction<TProgram>)
  | ({
      instructionType: SolanaCoreMultisigInstruction.EditTx;
    } & ParsedEditTxInstruction<TProgram>)
  | ({
      instructionType: SolanaCoreMultisigInstruction.ExecuteTx;
    } & ParsedExecuteTxInstruction<TProgram>)
  | ({
      instructionType: SolanaCoreMultisigInstruction.InitializeMultisig;
    } & ParsedInitializeMultisigInstruction<TProgram>)
  | ({
      instructionType: SolanaCoreMultisigInstruction.RevokeApproval;
    } & ParsedRevokeApprovalInstruction<TProgram>);
