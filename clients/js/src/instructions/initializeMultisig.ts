/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableSignerAccount,
} from "@solana/kit";
import { SOLANA_CORE_MULTISIG_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";

export const INITIALIZE_MULTISIG_DISCRIMINATOR = new Uint8Array([
  220, 130, 117, 21, 27, 227, 78, 213,
]);

export function getInitializeMultisigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_MULTISIG_DISCRIMINATOR,
  );
}

export type InitializeMultisigInstruction<
  TProgram extends string = typeof SOLANA_CORE_MULTISIG_PROGRAM_ADDRESS,
  TAccountMultisig extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountMultisig extends string
        ? WritableSignerAccount<TAccountMultisig> &
            IAccountSignerMeta<TAccountMultisig>
        : TAccountMultisig,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeMultisigInstructionData = {
  discriminator: ReadonlyUint8Array;
  owners: Array<Address>;
  threshold: bigint;
  bump: number;
};

export type InitializeMultisigInstructionDataArgs = {
  owners: Array<Address>;
  threshold: number | bigint;
  bump: number;
};

export function getInitializeMultisigInstructionDataEncoder(): Encoder<InitializeMultisigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["owners", getArrayEncoder(getAddressEncoder())],
      ["threshold", getU64Encoder()],
      ["bump", getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_MULTISIG_DISCRIMINATOR }),
  );
}

export function getInitializeMultisigInstructionDataDecoder(): Decoder<InitializeMultisigInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["owners", getArrayDecoder(getAddressDecoder())],
    ["threshold", getU64Decoder()],
    ["bump", getU8Decoder()],
  ]);
}

export function getInitializeMultisigInstructionDataCodec(): Codec<
  InitializeMultisigInstructionDataArgs,
  InitializeMultisigInstructionData
> {
  return combineCodec(
    getInitializeMultisigInstructionDataEncoder(),
    getInitializeMultisigInstructionDataDecoder(),
  );
}

export type InitializeMultisigInput<TAccountMultisig extends string = string> =
  {
    multisig: TransactionSigner<TAccountMultisig>;
    owners: InitializeMultisigInstructionDataArgs["owners"];
    threshold: InitializeMultisigInstructionDataArgs["threshold"];
    bump: InitializeMultisigInstructionDataArgs["bump"];
  };

export function getInitializeMultisigInstruction<
  TAccountMultisig extends string,
  TProgramAddress extends Address = typeof SOLANA_CORE_MULTISIG_PROGRAM_ADDRESS,
>(
  input: InitializeMultisigInput<TAccountMultisig>,
  config?: { programAddress?: TProgramAddress },
): InitializeMultisigInstruction<TProgramAddress, TAccountMultisig> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SOLANA_CORE_MULTISIG_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    multisig: { value: input.multisig ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [getAccountMeta(accounts.multisig)],
    programAddress,
    data: getInitializeMultisigInstructionDataEncoder().encode(
      args as InitializeMultisigInstructionDataArgs,
    ),
  } as InitializeMultisigInstruction<TProgramAddress, TAccountMultisig>;

  return instruction;
}

export type ParsedInitializeMultisigInstruction<
  TProgram extends string = typeof SOLANA_CORE_MULTISIG_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    multisig: TAccountMetas[0];
  };
  data: InitializeMultisigInstructionData;
};

export function parseInitializeMultisigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedInitializeMultisigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      multisig: getNextAccount(),
    },
    data: getInitializeMultisigInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
