/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from "@solana/kit";
import { SOLANA_CORE_MULTISIG_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";

export const APPROVE_DISCRIMINATOR = new Uint8Array([
  69, 74, 217, 36, 115, 117, 97, 76,
]);

export function getApproveDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(APPROVE_DISCRIMINATOR);
}

export type ApproveInstruction<
  TProgram extends string = typeof SOLANA_CORE_MULTISIG_PROGRAM_ADDRESS,
  TAccountMultisig extends string | IAccountMeta<string> = string,
  TAccountTransaction extends string | IAccountMeta<string> = string,
  TAccountProposer extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountMultisig extends string
        ? ReadonlyAccount<TAccountMultisig>
        : TAccountMultisig,
      TAccountTransaction extends string
        ? WritableAccount<TAccountTransaction>
        : TAccountTransaction,
      TAccountProposer extends string
        ? ReadonlySignerAccount<TAccountProposer> &
            IAccountSignerMeta<TAccountProposer>
        : TAccountProposer,
      ...TRemainingAccounts,
    ]
  >;

export type ApproveInstructionData = { discriminator: ReadonlyUint8Array };

export type ApproveInstructionDataArgs = {};

export function getApproveInstructionDataEncoder(): Encoder<ApproveInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: APPROVE_DISCRIMINATOR }),
  );
}

export function getApproveInstructionDataDecoder(): Decoder<ApproveInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getApproveInstructionDataCodec(): Codec<
  ApproveInstructionDataArgs,
  ApproveInstructionData
> {
  return combineCodec(
    getApproveInstructionDataEncoder(),
    getApproveInstructionDataDecoder(),
  );
}

export type ApproveInput<
  TAccountMultisig extends string = string,
  TAccountTransaction extends string = string,
  TAccountProposer extends string = string,
> = {
  multisig: Address<TAccountMultisig>;
  transaction: Address<TAccountTransaction>;
  proposer: TransactionSigner<TAccountProposer>;
};

export function getApproveInstruction<
  TAccountMultisig extends string,
  TAccountTransaction extends string,
  TAccountProposer extends string,
  TProgramAddress extends Address = typeof SOLANA_CORE_MULTISIG_PROGRAM_ADDRESS,
>(
  input: ApproveInput<TAccountMultisig, TAccountTransaction, TAccountProposer>,
  config?: { programAddress?: TProgramAddress },
): ApproveInstruction<
  TProgramAddress,
  TAccountMultisig,
  TAccountTransaction,
  TAccountProposer
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SOLANA_CORE_MULTISIG_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    multisig: { value: input.multisig ?? null, isWritable: false },
    transaction: { value: input.transaction ?? null, isWritable: true },
    proposer: { value: input.proposer ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.multisig),
      getAccountMeta(accounts.transaction),
      getAccountMeta(accounts.proposer),
    ],
    programAddress,
    data: getApproveInstructionDataEncoder().encode({}),
  } as ApproveInstruction<
    TProgramAddress,
    TAccountMultisig,
    TAccountTransaction,
    TAccountProposer
  >;

  return instruction;
}

export type ParsedApproveInstruction<
  TProgram extends string = typeof SOLANA_CORE_MULTISIG_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    multisig: TAccountMetas[0];
    transaction: TAccountMetas[1];
    proposer: TAccountMetas[2];
  };
  data: ApproveInstructionData;
};

export function parseApproveInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedApproveInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      multisig: getNextAccount(),
      transaction: getNextAccount(),
      proposer: getNextAccount(),
    },
    data: getApproveInstructionDataDecoder().decode(instruction.data),
  };
}
