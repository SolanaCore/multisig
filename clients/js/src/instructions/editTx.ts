/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from "@solana/kit";
import { SOLANA_CORE_MULTISIG_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";
import {
  getTransactionAccountDecoder,
  getTransactionAccountEncoder,
  type TransactionAccount,
  type TransactionAccountArgs,
} from "../types";

export const EDIT_TX_DISCRIMINATOR = new Uint8Array([
  85, 186, 248, 177, 31, 2, 163, 164,
]);

export function getEditTxDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(EDIT_TX_DISCRIMINATOR);
}

export type EditTxInstruction<
  TProgram extends string = typeof SOLANA_CORE_MULTISIG_PROGRAM_ADDRESS,
  TAccountMultisig extends string | IAccountMeta<string> = string,
  TAccountTransaction extends string | IAccountMeta<string> = string,
  TAccountProposer extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountMultisig extends string
        ? WritableAccount<TAccountMultisig>
        : TAccountMultisig,
      TAccountTransaction extends string
        ? WritableAccount<TAccountTransaction>
        : TAccountTransaction,
      TAccountProposer extends string
        ? ReadonlySignerAccount<TAccountProposer> &
            IAccountSignerMeta<TAccountProposer>
        : TAccountProposer,
      ...TRemainingAccounts,
    ]
  >;

export type EditTxInstructionData = {
  discriminator: ReadonlyUint8Array;
  data: ReadonlyUint8Array;
  accs: Array<TransactionAccount>;
};

export type EditTxInstructionDataArgs = {
  data: ReadonlyUint8Array;
  accs: Array<TransactionAccountArgs>;
};

export function getEditTxInstructionDataEncoder(): Encoder<EditTxInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["data", addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
      ["accs", getArrayEncoder(getTransactionAccountEncoder())],
    ]),
    (value) => ({ ...value, discriminator: EDIT_TX_DISCRIMINATOR }),
  );
}

export function getEditTxInstructionDataDecoder(): Decoder<EditTxInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["data", addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
    ["accs", getArrayDecoder(getTransactionAccountDecoder())],
  ]);
}

export function getEditTxInstructionDataCodec(): Codec<
  EditTxInstructionDataArgs,
  EditTxInstructionData
> {
  return combineCodec(
    getEditTxInstructionDataEncoder(),
    getEditTxInstructionDataDecoder(),
  );
}

export type EditTxInput<
  TAccountMultisig extends string = string,
  TAccountTransaction extends string = string,
  TAccountProposer extends string = string,
> = {
  multisig: Address<TAccountMultisig>;
  transaction: Address<TAccountTransaction>;
  proposer: TransactionSigner<TAccountProposer>;
  data: EditTxInstructionDataArgs["data"];
  accs: EditTxInstructionDataArgs["accs"];
};

export function getEditTxInstruction<
  TAccountMultisig extends string,
  TAccountTransaction extends string,
  TAccountProposer extends string,
  TProgramAddress extends Address = typeof SOLANA_CORE_MULTISIG_PROGRAM_ADDRESS,
>(
  input: EditTxInput<TAccountMultisig, TAccountTransaction, TAccountProposer>,
  config?: { programAddress?: TProgramAddress },
): EditTxInstruction<
  TProgramAddress,
  TAccountMultisig,
  TAccountTransaction,
  TAccountProposer
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SOLANA_CORE_MULTISIG_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    multisig: { value: input.multisig ?? null, isWritable: true },
    transaction: { value: input.transaction ?? null, isWritable: true },
    proposer: { value: input.proposer ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.multisig),
      getAccountMeta(accounts.transaction),
      getAccountMeta(accounts.proposer),
    ],
    programAddress,
    data: getEditTxInstructionDataEncoder().encode(
      args as EditTxInstructionDataArgs,
    ),
  } as EditTxInstruction<
    TProgramAddress,
    TAccountMultisig,
    TAccountTransaction,
    TAccountProposer
  >;

  return instruction;
}

export type ParsedEditTxInstruction<
  TProgram extends string = typeof SOLANA_CORE_MULTISIG_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    multisig: TAccountMetas[0];
    transaction: TAccountMetas[1];
    proposer: TAccountMetas[2];
  };
  data: EditTxInstructionData;
};

export function parseEditTxInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedEditTxInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      multisig: getNextAccount(),
      transaction: getNextAccount(),
      proposer: getNextAccount(),
    },
    data: getEditTxInstructionDataDecoder().decode(instruction.data),
  };
}
