/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from "@solana/kit";
import {
  getTransactionAccountDecoder,
  getTransactionAccountEncoder,
  type TransactionAccount,
  type TransactionAccountArgs,
} from "../types";

export const TRANSACTION_DISCRIMINATOR = new Uint8Array([
  11, 24, 174, 129, 203, 117, 242, 23,
]);

export function getTransactionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(TRANSACTION_DISCRIMINATOR);
}

export type Transaction = {
  discriminator: ReadonlyUint8Array;
  multisig: Address;
  programId: Address;
  accounts: Array<TransactionAccount>;
  data: ReadonlyUint8Array;
  signers: Array<boolean>;
  didExecute: boolean;
  owner: Address;
};

export type TransactionArgs = {
  multisig: Address;
  programId: Address;
  accounts: Array<TransactionAccountArgs>;
  data: ReadonlyUint8Array;
  signers: Array<boolean>;
  didExecute: boolean;
  owner: Address;
};

export function getTransactionEncoder(): Encoder<TransactionArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["multisig", getAddressEncoder()],
      ["programId", getAddressEncoder()],
      ["accounts", getArrayEncoder(getTransactionAccountEncoder())],
      ["data", addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
      ["signers", getArrayEncoder(getBooleanEncoder())],
      ["didExecute", getBooleanEncoder()],
      ["owner", getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: TRANSACTION_DISCRIMINATOR }),
  );
}

export function getTransactionDecoder(): Decoder<Transaction> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["multisig", getAddressDecoder()],
    ["programId", getAddressDecoder()],
    ["accounts", getArrayDecoder(getTransactionAccountDecoder())],
    ["data", addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
    ["signers", getArrayDecoder(getBooleanDecoder())],
    ["didExecute", getBooleanDecoder()],
    ["owner", getAddressDecoder()],
  ]);
}

export function getTransactionCodec(): Codec<TransactionArgs, Transaction> {
  return combineCodec(getTransactionEncoder(), getTransactionDecoder());
}

export function decodeTransaction<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<Transaction, TAddress>;
export function decodeTransaction<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<Transaction, TAddress>;
export function decodeTransaction<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<Transaction, TAddress> | MaybeAccount<Transaction, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getTransactionDecoder(),
  );
}

export async function fetchTransaction<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<Transaction, TAddress>> {
  const maybeAccount = await fetchMaybeTransaction(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeTransaction<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<Transaction, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeTransaction(maybeAccount);
}

export async function fetchAllTransaction(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<Account<Transaction>[]> {
  const maybeAccounts = await fetchAllMaybeTransaction(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeTransaction(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<Transaction>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeTransaction(maybeAccount));
}
