"use strict";
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.INITIALIZE_MULTISIG_DISCRIMINATOR = void 0;
exports.getInitializeMultisigDiscriminatorBytes = getInitializeMultisigDiscriminatorBytes;
exports.getInitializeMultisigInstructionDataEncoder = getInitializeMultisigInstructionDataEncoder;
exports.getInitializeMultisigInstructionDataDecoder = getInitializeMultisigInstructionDataDecoder;
exports.getInitializeMultisigInstructionDataCodec = getInitializeMultisigInstructionDataCodec;
exports.getInitializeMultisigInstruction = getInitializeMultisigInstruction;
exports.parseInitializeMultisigInstruction = parseInitializeMultisigInstruction;
const kit_1 = require("@solana/kit");
const programs_1 = require("../programs");
const shared_1 = require("../shared");
exports.INITIALIZE_MULTISIG_DISCRIMINATOR = new Uint8Array([
    220, 130, 117, 21, 27, 227, 78, 213,
]);
function getInitializeMultisigDiscriminatorBytes() {
    return (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(exports.INITIALIZE_MULTISIG_DISCRIMINATOR);
}
function getInitializeMultisigInstructionDataEncoder() {
    return (0, kit_1.transformEncoder)((0, kit_1.getStructEncoder)([
        ["discriminator", (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8)],
        ["owners", (0, kit_1.getArrayEncoder)((0, kit_1.getAddressEncoder)())],
        ["threshold", (0, kit_1.getU64Encoder)()],
        ["bump", (0, kit_1.getU8Encoder)()],
    ]), (value) => (Object.assign(Object.assign({}, value), { discriminator: exports.INITIALIZE_MULTISIG_DISCRIMINATOR })));
}
function getInitializeMultisigInstructionDataDecoder() {
    return (0, kit_1.getStructDecoder)([
        ["discriminator", (0, kit_1.fixDecoderSize)((0, kit_1.getBytesDecoder)(), 8)],
        ["owners", (0, kit_1.getArrayDecoder)((0, kit_1.getAddressDecoder)())],
        ["threshold", (0, kit_1.getU64Decoder)()],
        ["bump", (0, kit_1.getU8Decoder)()],
    ]);
}
function getInitializeMultisigInstructionDataCodec() {
    return (0, kit_1.combineCodec)(getInitializeMultisigInstructionDataEncoder(), getInitializeMultisigInstructionDataDecoder());
}
function getInitializeMultisigInstruction(input, config) {
    var _a, _b;
    // Program address.
    const programAddress = (_a = config === null || config === void 0 ? void 0 : config.programAddress) !== null && _a !== void 0 ? _a : programs_1.SOLANA_CORE_MULTISIG_PROGRAM_ADDRESS;
    // Original accounts.
    const originalAccounts = {
        multisig: { value: (_b = input.multisig) !== null && _b !== void 0 ? _b : null, isWritable: true },
    };
    const accounts = originalAccounts;
    // Original args.
    const args = Object.assign({}, input);
    const getAccountMeta = (0, shared_1.getAccountMetaFactory)(programAddress, "programId");
    const instruction = {
        accounts: [getAccountMeta(accounts.multisig)],
        programAddress,
        data: getInitializeMultisigInstructionDataEncoder().encode(args),
    };
    return instruction;
}
function parseInitializeMultisigInstruction(instruction) {
    if (instruction.accounts.length < 1) {
        // TODO: Coded error.
        throw new Error("Not enough accounts");
    }
    let accountIndex = 0;
    const getNextAccount = () => {
        const accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            multisig: getNextAccount(),
        },
        data: getInitializeMultisigInstructionDataDecoder().decode(instruction.data),
    };
}
