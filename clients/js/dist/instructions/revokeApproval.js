"use strict";
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.REVOKE_APPROVAL_DISCRIMINATOR = void 0;
exports.getRevokeApprovalDiscriminatorBytes = getRevokeApprovalDiscriminatorBytes;
exports.getRevokeApprovalInstructionDataEncoder = getRevokeApprovalInstructionDataEncoder;
exports.getRevokeApprovalInstructionDataDecoder = getRevokeApprovalInstructionDataDecoder;
exports.getRevokeApprovalInstructionDataCodec = getRevokeApprovalInstructionDataCodec;
exports.getRevokeApprovalInstruction = getRevokeApprovalInstruction;
exports.parseRevokeApprovalInstruction = parseRevokeApprovalInstruction;
const kit_1 = require("@solana/kit");
const programs_1 = require("../programs");
const shared_1 = require("../shared");
exports.REVOKE_APPROVAL_DISCRIMINATOR = new Uint8Array([
    44, 51, 184, 108, 182, 202, 20, 53,
]);
function getRevokeApprovalDiscriminatorBytes() {
    return (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(exports.REVOKE_APPROVAL_DISCRIMINATOR);
}
function getRevokeApprovalInstructionDataEncoder() {
    return (0, kit_1.transformEncoder)((0, kit_1.getStructEncoder)([["discriminator", (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8)]]), (value) => (Object.assign(Object.assign({}, value), { discriminator: exports.REVOKE_APPROVAL_DISCRIMINATOR })));
}
function getRevokeApprovalInstructionDataDecoder() {
    return (0, kit_1.getStructDecoder)([
        ["discriminator", (0, kit_1.fixDecoderSize)((0, kit_1.getBytesDecoder)(), 8)],
    ]);
}
function getRevokeApprovalInstructionDataCodec() {
    return (0, kit_1.combineCodec)(getRevokeApprovalInstructionDataEncoder(), getRevokeApprovalInstructionDataDecoder());
}
function getRevokeApprovalInstruction(input, config) {
    var _a, _b, _c, _d;
    // Program address.
    const programAddress = (_a = config === null || config === void 0 ? void 0 : config.programAddress) !== null && _a !== void 0 ? _a : programs_1.SOLANA_CORE_MULTISIG_PROGRAM_ADDRESS;
    // Original accounts.
    const originalAccounts = {
        multisig: { value: (_b = input.multisig) !== null && _b !== void 0 ? _b : null, isWritable: true },
        transaction: { value: (_c = input.transaction) !== null && _c !== void 0 ? _c : null, isWritable: true },
        proposer: { value: (_d = input.proposer) !== null && _d !== void 0 ? _d : null, isWritable: false },
    };
    const accounts = originalAccounts;
    const getAccountMeta = (0, shared_1.getAccountMetaFactory)(programAddress, "programId");
    const instruction = {
        accounts: [
            getAccountMeta(accounts.multisig),
            getAccountMeta(accounts.transaction),
            getAccountMeta(accounts.proposer),
        ],
        programAddress,
        data: getRevokeApprovalInstructionDataEncoder().encode({}),
    };
    return instruction;
}
function parseRevokeApprovalInstruction(instruction) {
    if (instruction.accounts.length < 3) {
        // TODO: Coded error.
        throw new Error("Not enough accounts");
    }
    let accountIndex = 0;
    const getNextAccount = () => {
        const accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            multisig: getNextAccount(),
            transaction: getNextAccount(),
            proposer: getNextAccount(),
        },
        data: getRevokeApprovalInstructionDataDecoder().decode(instruction.data),
    };
}
