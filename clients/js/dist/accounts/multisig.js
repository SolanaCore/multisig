"use strict";
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MULTISIG_DISCRIMINATOR = void 0;
exports.getMultisigDiscriminatorBytes = getMultisigDiscriminatorBytes;
exports.getMultisigEncoder = getMultisigEncoder;
exports.getMultisigDecoder = getMultisigDecoder;
exports.getMultisigCodec = getMultisigCodec;
exports.decodeMultisig = decodeMultisig;
exports.fetchMultisig = fetchMultisig;
exports.fetchMaybeMultisig = fetchMaybeMultisig;
exports.fetchAllMultisig = fetchAllMultisig;
exports.fetchAllMaybeMultisig = fetchAllMaybeMultisig;
const kit_1 = require("@solana/kit");
exports.MULTISIG_DISCRIMINATOR = new Uint8Array([
    224, 116, 121, 186, 68, 161, 79, 236,
]);
function getMultisigDiscriminatorBytes() {
    return (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(exports.MULTISIG_DISCRIMINATOR);
}
function getMultisigEncoder() {
    return (0, kit_1.transformEncoder)((0, kit_1.getStructEncoder)([
        ["discriminator", (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8)],
        ["owner", (0, kit_1.getArrayEncoder)((0, kit_1.getAddressEncoder)())],
        ["threshold", (0, kit_1.getU64Encoder)()],
        ["bump", (0, kit_1.getU8Encoder)()],
    ]), (value) => (Object.assign(Object.assign({}, value), { discriminator: exports.MULTISIG_DISCRIMINATOR })));
}
function getMultisigDecoder() {
    return (0, kit_1.getStructDecoder)([
        ["discriminator", (0, kit_1.fixDecoderSize)((0, kit_1.getBytesDecoder)(), 8)],
        ["owner", (0, kit_1.getArrayDecoder)((0, kit_1.getAddressDecoder)())],
        ["threshold", (0, kit_1.getU64Decoder)()],
        ["bump", (0, kit_1.getU8Decoder)()],
    ]);
}
function getMultisigCodec() {
    return (0, kit_1.combineCodec)(getMultisigEncoder(), getMultisigDecoder());
}
function decodeMultisig(encodedAccount) {
    return (0, kit_1.decodeAccount)(encodedAccount, getMultisigDecoder());
}
function fetchMultisig(rpc, address, config) {
    return __awaiter(this, void 0, void 0, function* () {
        const maybeAccount = yield fetchMaybeMultisig(rpc, address, config);
        (0, kit_1.assertAccountExists)(maybeAccount);
        return maybeAccount;
    });
}
function fetchMaybeMultisig(rpc, address, config) {
    return __awaiter(this, void 0, void 0, function* () {
        const maybeAccount = yield (0, kit_1.fetchEncodedAccount)(rpc, address, config);
        return decodeMultisig(maybeAccount);
    });
}
function fetchAllMultisig(rpc, addresses, config) {
    return __awaiter(this, void 0, void 0, function* () {
        const maybeAccounts = yield fetchAllMaybeMultisig(rpc, addresses, config);
        (0, kit_1.assertAccountsExist)(maybeAccounts);
        return maybeAccounts;
    });
}
function fetchAllMaybeMultisig(rpc, addresses, config) {
    return __awaiter(this, void 0, void 0, function* () {
        const maybeAccounts = yield (0, kit_1.fetchEncodedAccounts)(rpc, addresses, config);
        return maybeAccounts.map((maybeAccount) => decodeMultisig(maybeAccount));
    });
}
