"use strict";
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SOLANA_CORE_MULTISIG_ERROR__INVALID_TRANSACTION_DETAILS = exports.SOLANA_CORE_MULTISIG_ERROR__TRANSACTION_ALREADY_EXECUTED = exports.SOLANA_CORE_MULTISIG_ERROR__INSUFFICIENT_SIGNERS = exports.SOLANA_CORE_MULTISIG_ERROR__INVALID_OWNER = exports.SOLANA_CORE_MULTISIG_ERROR__INVALID_THRESHOLD = void 0;
exports.getSolanaCoreMultisigErrorMessage = getSolanaCoreMultisigErrorMessage;
exports.isSolanaCoreMultisigError = isSolanaCoreMultisigError;
const kit_1 = require("@solana/kit");
const programs_1 = require("../programs");
/** InvalidThreshold: Threshold must be greater than zero and less than or equal to number of owners */
exports.SOLANA_CORE_MULTISIG_ERROR__INVALID_THRESHOLD = 0x1770; // 6000
/** InvalidOwner: The owner is not part of the multisig group */
exports.SOLANA_CORE_MULTISIG_ERROR__INVALID_OWNER = 0x1771; // 6001
/** InsufficientSigners: Not enough owners signed this transaction. */
exports.SOLANA_CORE_MULTISIG_ERROR__INSUFFICIENT_SIGNERS = 0x1772; // 6002
/** TransactionAlreadyExecuted: Transaction is already executed */
exports.SOLANA_CORE_MULTISIG_ERROR__TRANSACTION_ALREADY_EXECUTED = 0x1773; // 6003
/** InvalidTransactionDetails: Transaction details provided are invalid */
exports.SOLANA_CORE_MULTISIG_ERROR__INVALID_TRANSACTION_DETAILS = 0x1774; // 6004
let solanaCoreMultisigErrorMessages;
if (process.env.NODE_ENV !== "production") {
    solanaCoreMultisigErrorMessages = {
        [exports.SOLANA_CORE_MULTISIG_ERROR__INSUFFICIENT_SIGNERS]: `Not enough owners signed this transaction.`,
        [exports.SOLANA_CORE_MULTISIG_ERROR__INVALID_OWNER]: `The owner is not part of the multisig group`,
        [exports.SOLANA_CORE_MULTISIG_ERROR__INVALID_THRESHOLD]: `Threshold must be greater than zero and less than or equal to number of owners`,
        [exports.SOLANA_CORE_MULTISIG_ERROR__INVALID_TRANSACTION_DETAILS]: `Transaction details provided are invalid`,
        [exports.SOLANA_CORE_MULTISIG_ERROR__TRANSACTION_ALREADY_EXECUTED]: `Transaction is already executed`,
    };
}
function getSolanaCoreMultisigErrorMessage(code) {
    if (process.env.NODE_ENV !== "production") {
        return solanaCoreMultisigErrorMessages[code];
    }
    return "Error message not available in production bundles.";
}
function isSolanaCoreMultisigError(error, transactionMessage, code) {
    return (0, kit_1.isProgramError)(error, transactionMessage, programs_1.SOLANA_CORE_MULTISIG_PROGRAM_ADDRESS, code);
}
