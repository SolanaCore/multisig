"use strict";
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolanaCoreMultisigInstruction = exports.SolanaCoreMultisigAccount = exports.SOLANA_CORE_MULTISIG_PROGRAM_ADDRESS = void 0;
exports.identifySolanaCoreMultisigAccount = identifySolanaCoreMultisigAccount;
exports.identifySolanaCoreMultisigInstruction = identifySolanaCoreMultisigInstruction;
const kit_1 = require("@solana/kit");
exports.SOLANA_CORE_MULTISIG_PROGRAM_ADDRESS = "C9h86YyYMpKViSzRpE7XUPrRVRypu5WTSitJ9n8czcZh";
var SolanaCoreMultisigAccount;
(function (SolanaCoreMultisigAccount) {
    SolanaCoreMultisigAccount[SolanaCoreMultisigAccount["Multisig"] = 0] = "Multisig";
    SolanaCoreMultisigAccount[SolanaCoreMultisigAccount["Transaction"] = 1] = "Transaction";
})(SolanaCoreMultisigAccount || (exports.SolanaCoreMultisigAccount = SolanaCoreMultisigAccount = {}));
function identifySolanaCoreMultisigAccount(account) {
    const data = "data" in account ? account.data : account;
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([224, 116, 121, 186, 68, 161, 79, 236])), 0)) {
        return SolanaCoreMultisigAccount.Multisig;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([11, 24, 174, 129, 203, 117, 242, 23])), 0)) {
        return SolanaCoreMultisigAccount.Transaction;
    }
    throw new Error("The provided account could not be identified as a solanaCoreMultisig account.");
}
var SolanaCoreMultisigInstruction;
(function (SolanaCoreMultisigInstruction) {
    SolanaCoreMultisigInstruction[SolanaCoreMultisigInstruction["Approve"] = 0] = "Approve";
    SolanaCoreMultisigInstruction[SolanaCoreMultisigInstruction["CancelTx"] = 1] = "CancelTx";
    SolanaCoreMultisigInstruction[SolanaCoreMultisigInstruction["CreateTx"] = 2] = "CreateTx";
    SolanaCoreMultisigInstruction[SolanaCoreMultisigInstruction["EditTx"] = 3] = "EditTx";
    SolanaCoreMultisigInstruction[SolanaCoreMultisigInstruction["ExecuteTx"] = 4] = "ExecuteTx";
    SolanaCoreMultisigInstruction[SolanaCoreMultisigInstruction["InitializeMultisig"] = 5] = "InitializeMultisig";
    SolanaCoreMultisigInstruction[SolanaCoreMultisigInstruction["RevokeApproval"] = 6] = "RevokeApproval";
})(SolanaCoreMultisigInstruction || (exports.SolanaCoreMultisigInstruction = SolanaCoreMultisigInstruction = {}));
function identifySolanaCoreMultisigInstruction(instruction) {
    const data = "data" in instruction ? instruction.data : instruction;
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([69, 74, 217, 36, 115, 117, 97, 76])), 0)) {
        return SolanaCoreMultisigInstruction.Approve;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([235, 85, 151, 12, 219, 197, 50, 18])), 0)) {
        return SolanaCoreMultisigInstruction.CancelTx;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([97, 223, 80, 153, 55, 13, 155, 12])), 0)) {
        return SolanaCoreMultisigInstruction.CreateTx;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([85, 186, 248, 177, 31, 2, 163, 164])), 0)) {
        return SolanaCoreMultisigInstruction.EditTx;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([249, 17, 145, 23, 12, 252, 17, 41])), 0)) {
        return SolanaCoreMultisigInstruction.ExecuteTx;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([220, 130, 117, 21, 27, 227, 78, 213])), 0)) {
        return SolanaCoreMultisigInstruction.InitializeMultisig;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([44, 51, 184, 108, 182, 202, 20, 53])), 0)) {
        return SolanaCoreMultisigInstruction.RevokeApproval;
    }
    throw new Error("The provided instruction could not be identified as a solanaCoreMultisig instruction.");
}
