/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type Multisig = Account<MultisigAccountData>;

export type MultisigAccountData = {
  discriminator: Uint8Array;
  owner: Array<PublicKey>;
  threshold: bigint;
  bump: number;
};

export type MultisigAccountDataArgs = {
  owner: Array<PublicKey>;
  threshold: number | bigint;
  bump: number;
};

export function getMultisigAccountDataSerializer(): Serializer<
  MultisigAccountDataArgs,
  MultisigAccountData
> {
  return mapSerializer<MultisigAccountDataArgs, any, MultisigAccountData>(
    struct<MultisigAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['owner', array(publicKeySerializer())],
        ['threshold', u64()],
        ['bump', u8()],
      ],
      { description: 'MultisigAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([224, 116, 121, 186, 68, 161, 79, 236]),
    })
  ) as Serializer<MultisigAccountDataArgs, MultisigAccountData>;
}

export function deserializeMultisig(rawAccount: RpcAccount): Multisig {
  return deserializeAccount(rawAccount, getMultisigAccountDataSerializer());
}

export async function fetchMultisig(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Multisig> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Multisig');
  return deserializeMultisig(maybeAccount);
}

export async function safeFetchMultisig(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Multisig | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeMultisig(maybeAccount) : null;
}

export async function fetchAllMultisig(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Multisig[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Multisig');
    return deserializeMultisig(maybeAccount);
  });
}

export async function safeFetchAllMultisig(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Multisig[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeMultisig(maybeAccount as RpcAccount));
}

export function getMultisigGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'solanaCoreMultisig',
    'C9h86YyYMpKViSzRpE7XUPrRVRypu5WTSitJ9n8czcZh'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      owner: Array<PublicKey>;
      threshold: number | bigint;
      bump: number;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      owner: [8, array(publicKeySerializer())],
      threshold: [null, u64()],
      bump: [null, u8()],
    })
    .deserializeUsing<Multisig>((account) => deserializeMultisig(account))
    .whereField(
      'discriminator',
      new Uint8Array([224, 116, 121, 186, 68, 161, 79, 236])
    );
}
