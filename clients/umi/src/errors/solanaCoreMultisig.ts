/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { Program, ProgramError } from '@metaplex-foundation/umi';

type ProgramErrorConstructor = new (
  program: Program,
  cause?: Error
) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/** InvalidThreshold: Threshold must be greater than zero and less than or equal to number of owners */
export class InvalidThresholdError extends ProgramError {
  override readonly name: string = 'InvalidThreshold';

  readonly code: number = 0x1770; // 6000

  constructor(program: Program, cause?: Error) {
    super(
      'Threshold must be greater than zero and less than or equal to number of owners',
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x1770, InvalidThresholdError);
nameToErrorMap.set('InvalidThreshold', InvalidThresholdError);

/** InvalidOwner: The owner is not part of the multisig group */
export class InvalidOwnerError extends ProgramError {
  override readonly name: string = 'InvalidOwner';

  readonly code: number = 0x1771; // 6001

  constructor(program: Program, cause?: Error) {
    super('The owner is not part of the multisig group', program, cause);
  }
}
codeToErrorMap.set(0x1771, InvalidOwnerError);
nameToErrorMap.set('InvalidOwner', InvalidOwnerError);

/** InsufficientSigners: Not enough owners signed this transaction. */
export class InsufficientSignersError extends ProgramError {
  override readonly name: string = 'InsufficientSigners';

  readonly code: number = 0x1772; // 6002

  constructor(program: Program, cause?: Error) {
    super('Not enough owners signed this transaction.', program, cause);
  }
}
codeToErrorMap.set(0x1772, InsufficientSignersError);
nameToErrorMap.set('InsufficientSigners', InsufficientSignersError);

/** TransactionAlreadyExecuted: Transaction is already executed */
export class TransactionAlreadyExecutedError extends ProgramError {
  override readonly name: string = 'TransactionAlreadyExecuted';

  readonly code: number = 0x1773; // 6003

  constructor(program: Program, cause?: Error) {
    super('Transaction is already executed', program, cause);
  }
}
codeToErrorMap.set(0x1773, TransactionAlreadyExecutedError);
nameToErrorMap.set(
  'TransactionAlreadyExecuted',
  TransactionAlreadyExecutedError
);

/** InvalidTransactionDetails: Transaction details provided are invalid */
export class InvalidTransactionDetailsError extends ProgramError {
  override readonly name: string = 'InvalidTransactionDetails';

  readonly code: number = 0x1774; // 6004

  constructor(program: Program, cause?: Error) {
    super('Transaction details provided are invalid', program, cause);
  }
}
codeToErrorMap.set(0x1774, InvalidTransactionDetailsError);
nameToErrorMap.set('InvalidTransactionDetails', InvalidTransactionDetailsError);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getSolanaCoreMultisigErrorFromCode(
  code: number,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getSolanaCoreMultisigErrorFromName(
  name: string,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
