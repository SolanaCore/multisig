/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bytes,
  mapSerializer,
  struct,
  u32,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import {
  TransactionAccount,
  TransactionAccountArgs,
  getTransactionAccountSerializer,
} from '../types';

// Accounts.
export type EditTxInstructionAccounts = {
  multisig: PublicKey | Pda;
  transaction: PublicKey | Pda;
  proposer: Signer;
};

// Data.
export type EditTxInstructionData = {
  discriminator: Uint8Array;
  data: Uint8Array;
  accs: Array<TransactionAccount>;
};

export type EditTxInstructionDataArgs = {
  data: Uint8Array;
  accs: Array<TransactionAccountArgs>;
};

export function getEditTxInstructionDataSerializer(): Serializer<
  EditTxInstructionDataArgs,
  EditTxInstructionData
> {
  return mapSerializer<EditTxInstructionDataArgs, any, EditTxInstructionData>(
    struct<EditTxInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['data', bytes({ size: u32() })],
        ['accs', array(getTransactionAccountSerializer())],
      ],
      { description: 'EditTxInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([85, 186, 248, 177, 31, 2, 163, 164]),
    })
  ) as Serializer<EditTxInstructionDataArgs, EditTxInstructionData>;
}

// Args.
export type EditTxInstructionArgs = EditTxInstructionDataArgs;

// Instruction.
export function editTx(
  context: Pick<Context, 'programs'>,
  input: EditTxInstructionAccounts & EditTxInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'solanaCoreMultisig',
    'C9h86YyYMpKViSzRpE7XUPrRVRypu5WTSitJ9n8czcZh'
  );

  // Accounts.
  const resolvedAccounts = {
    multisig: {
      index: 0,
      isWritable: true as boolean,
      value: input.multisig ?? null,
    },
    transaction: {
      index: 1,
      isWritable: true as boolean,
      value: input.transaction ?? null,
    },
    proposer: {
      index: 2,
      isWritable: false as boolean,
      value: input.proposer ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: EditTxInstructionArgs = { ...input };

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getEditTxInstructionDataSerializer().serialize(
    resolvedArgs as EditTxInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
