/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Context,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type InitializeMultisigInstructionAccounts = {
  multisig: Signer;
};

// Data.
export type InitializeMultisigInstructionData = {
  discriminator: Uint8Array;
  owners: Array<PublicKey>;
  threshold: bigint;
  bump: number;
};

export type InitializeMultisigInstructionDataArgs = {
  owners: Array<PublicKey>;
  threshold: number | bigint;
  bump: number;
};

export function getInitializeMultisigInstructionDataSerializer(): Serializer<
  InitializeMultisigInstructionDataArgs,
  InitializeMultisigInstructionData
> {
  return mapSerializer<
    InitializeMultisigInstructionDataArgs,
    any,
    InitializeMultisigInstructionData
  >(
    struct<InitializeMultisigInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['owners', array(publicKeySerializer())],
        ['threshold', u64()],
        ['bump', u8()],
      ],
      { description: 'InitializeMultisigInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([220, 130, 117, 21, 27, 227, 78, 213]),
    })
  ) as Serializer<
    InitializeMultisigInstructionDataArgs,
    InitializeMultisigInstructionData
  >;
}

// Args.
export type InitializeMultisigInstructionArgs =
  InitializeMultisigInstructionDataArgs;

// Instruction.
export function initializeMultisig(
  context: Pick<Context, 'programs'>,
  input: InitializeMultisigInstructionAccounts &
    InitializeMultisigInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'solanaCoreMultisig',
    'C9h86YyYMpKViSzRpE7XUPrRVRypu5WTSitJ9n8czcZh'
  );

  // Accounts.
  const resolvedAccounts = {
    multisig: {
      index: 0,
      isWritable: true as boolean,
      value: input.multisig ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: InitializeMultisigInstructionArgs = { ...input };

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getInitializeMultisigInstructionDataSerializer().serialize(
    resolvedArgs as InitializeMultisigInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
