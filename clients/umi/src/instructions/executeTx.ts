/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type ExecuteTxInstructionAccounts = {
  multisig: Signer;
  multisigSigner?: PublicKey | Pda;
  transaction: PublicKey | Pda;
};

// Data.
export type ExecuteTxInstructionData = { discriminator: Uint8Array };

export type ExecuteTxInstructionDataArgs = {};

export function getExecuteTxInstructionDataSerializer(): Serializer<
  ExecuteTxInstructionDataArgs,
  ExecuteTxInstructionData
> {
  return mapSerializer<
    ExecuteTxInstructionDataArgs,
    any,
    ExecuteTxInstructionData
  >(
    struct<ExecuteTxInstructionData>([['discriminator', bytes({ size: 8 })]], {
      description: 'ExecuteTxInstructionData',
    }),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([249, 17, 145, 23, 12, 252, 17, 41]),
    })
  ) as Serializer<ExecuteTxInstructionDataArgs, ExecuteTxInstructionData>;
}

// Instruction.
export function executeTx(
  context: Pick<Context, 'eddsa' | 'programs'>,
  input: ExecuteTxInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'solanaCoreMultisig',
    'C9h86YyYMpKViSzRpE7XUPrRVRypu5WTSitJ9n8czcZh'
  );

  // Accounts.
  const resolvedAccounts = {
    multisig: {
      index: 0,
      isWritable: true as boolean,
      value: input.multisig ?? null,
    },
    multisigSigner: {
      index: 1,
      isWritable: false as boolean,
      value: input.multisigSigner ?? null,
    },
    transaction: {
      index: 2,
      isWritable: true as boolean,
      value: input.transaction ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.multisigSigner.value) {
    resolvedAccounts.multisigSigner.value = context.eddsa.findPda(programId, [
      bytes().serialize(
        new Uint8Array([109, 117, 108, 116, 105, 115, 105, 103])
      ),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.multisig.value)
      ),
    ]);
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getExecuteTxInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
